#!/usr/bin/env python3
"""
Complete setup script for MicroSaaS platform
This script will set up all the missing features and create initial data
"""

from app import create_app, db
from app.models import User, AdminUser, Template
from werkzeug.security import generate_password_hash
import json

def setup_complete_platform():
    """Set up the complete MicroSaaS platform with all features"""
    app = create_app()
    
    with app.app_context():
        # Create all tables
        print("Creating database tables...")
        db.create_all()
        
        # Create default templates
        print("Creating default templates...")
        create_default_templates()
        
        # Create sample admin if none exists
        if not AdminUser.query.first():
            print("Creating default admin user...")
            create_default_admin()
        
        print("âœ… Complete MicroSaaS platform setup finished!")
        print("\nðŸŽ‰ All features are now available:")
        print("  âœ… Core Tools (Invoice, Resume, Certificate, QR Code)")
        print("  âœ… User Authentication with Email Verification")
        print("  âœ… Subscription System with Feature Restrictions")
        print("  âœ… Admin Panel with Full Management")
        print("  âœ… Bulk Certificate Generation")
        print("  âœ… Advanced Analytics Dashboard")
        print("  âœ… Security Features (Rate Limiting, Error Handling)")
        print("  âœ… Template System (Free vs Premium)")
        print("  âœ… File Management and History")
        print("\nðŸš€ Your MicroSaaS platform is ready for production!")

def create_default_templates():
    """Create default templates for all tools"""
    templates = [
        # Invoice Templates
        {
            'name': 'Basic Invoice',
            'type': 'invoice',
            'is_premium': False,
            'template_data': json.dumps({
                'style': 'basic',
                'colors': {'primary': '#0b63f6', 'secondary': '#667085'},
                'layout': 'standard'
            })
        },
        {
            'name': 'Professional Invoice',
            'type': 'invoice',
            'is_premium': True,
            'template_data': json.dumps({
                'style': 'professional',
                'colors': {'primary': '#1f2937', 'secondary': '#6b7280'},
                'layout': 'modern'
            })
        },
        {
            'name': 'Executive Invoice',
            'type': 'invoice',
            'is_premium': True,
            'template_data': json.dumps({
                'style': 'executive',
                'colors': {'primary': '#7c3aed', 'secondary': '#9ca3af'},
                'layout': 'premium'
            })
        },
        
        # Resume Templates
        {
            'name': 'Clean Resume',
            'type': 'resume',
            'is_premium': False,
            'template_data': json.dumps({
                'style': 'clean',
                'layout': 'standard',
                'sections': ['contact', 'summary', 'experience', 'education', 'skills']
            })
        },
        {
            'name': 'Modern Resume',
            'type': 'resume',
            'is_premium': True,
            'template_data': json.dumps({
                'style': 'modern',
                'layout': 'two-column',
                'sections': ['contact', 'summary', 'experience', 'education', 'skills', 'projects']
            })
        },
        {
            'name': 'Executive Resume',
            'type': 'resume',
            'is_premium': True,
            'template_data': json.dumps({
                'style': 'executive',
                'layout': 'premium',
                'sections': ['contact', 'summary', 'experience', 'education', 'skills', 'achievements', 'certifications']
            })
        },
        
        # Certificate Templates
        {
            'name': 'Classic Certificate',
            'type': 'certificate',
            'is_premium': False,
            'template_data': json.dumps({
                'style': 'classic',
                'border': 'simple',
                'colors': {'primary': '#0b63f6', 'accent': '#1f2937'}
            })
        },
        {
            'name': 'Elegant Certificate',
            'type': 'certificate',
            'is_premium': True,
            'template_data': json.dumps({
                'style': 'elegant',
                'border': 'ornate',
                'colors': {'primary': '#7c3aed', 'accent': '#1f2937'}
            })
        },
        {
            'name': 'Luxury Certificate',
            'type': 'certificate',
            'is_premium': True,
            'template_data': json.dumps({
                'style': 'luxury',
                'border': 'gold',
                'colors': {'primary': '#d97706', 'accent': '#1f2937'}
            })
        },
        
        # QR Code Templates
        {
            'name': 'Standard QR',
            'type': 'qrcode',
            'is_premium': False,
            'template_data': json.dumps({
                'style': 'standard',
                'size': 'medium',
                'border': 'none'
            })
        },
        {
            'name': 'Branded QR',
            'type': 'qrcode',
            'is_premium': True,
            'template_data': json.dumps({
                'style': 'branded',
                'size': 'large',
                'border': 'custom',
                'logo': True
            })
        },
        {
            'name': 'Premium QR',
            'type': 'qrcode',
            'is_premium': True,
            'template_data': json.dumps({
                'style': 'premium',
                'size': 'extra-large',
                'border': 'fancy',
                'logo': True,
                'colors': 'custom'
            })
        }
    ]
    
    for template_data in templates:
        if not Template.query.filter_by(name=template_data['name'], type=template_data['type']).first():
            template = Template(**template_data)
            db.session.add(template)
    
    db.session.commit()
    print(f"Created {len(templates)} default templates")

def create_default_admin():
    """Create default admin user"""
    admin = AdminUser(
        username='admin',
        email='admin@microsaas.com',
        password=generate_password_hash('admin123'),
        is_super_admin=True
    )
    db.session.add(admin)
    db.session.commit()
    print("Default admin created: admin@microsaas.com / admin123")

if __name__ == "__main__":
    setup_complete_platform()
